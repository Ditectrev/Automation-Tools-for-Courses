,0
0,"### When can Product Backlog Refinement occur?
"
1,"- [ ] Only during Sprint Planning.
"
2,"- [x] Anytime during the Sprint.
"
3,"- [ ] Only during Refinement meetings planned by the Product Owner.
"
4,"- [ ] Before Sprint Planning.
"
5,"### What would NOT be considered refactoring?
"
6,"- [ ] Reordering method parameters to improve readability.
"
7,"- [ ] Extracting interfaces.
"
8,"- [ ] Renaming things to be more logical.
"
9,"- [x] Changing external interfaces or APIS.
"
10,"- [ ] Extracting methods.
"
11,"3.  ### Question3
"
12,"- [ ] Developers should perform a combination of local and private builds.
"
13,"- [ ] Each team's automated build is integrated toward the end of the Sprint.
"
14,"- [x] There is one automated and integrated build for all seven teams.
"
15,"- [ ] Each team should have its own automated build.
"
16,"4.  ### Question4
"
17,"- [x] The Developers.
"
18,"- [ ] Increments do not need documentation.
"
19,"- [ ] The Product Owner.
"
20,"- [ ] Technical Writers.
"
21,"- [ ] The Scrum Master.
"
22,"5.  ### Question5
"
23,"- [ ] Copying a portion of a code base to isolate it from the original codebase.
"
24,"- [ ] Identifying a particular codebase as ready for distribution.
"
25,"- [ ] Triggering a Deployment into Production.
"
26,"- [x] Combining two or more versions of code into a single codebase.
"
27,"6.  ### Question6
"
28,"- [x] Daily Scrum.
"
29,"- [ ] Release Planning.
"
30,"- [x] Sprint Review.
"
31,"- [ ] Refinement Meeting.
"
32,"- [x] Sprint Retrospective.
"
33,"7.  ### Question7
"
34,"- [x] Performance.
"
35,"- [ ] Exploratory.
"
36,"- [x] Unit.
"
37,"- [x] Functional.
"
38,"- [ ] Manual regression.
"
39,"- [x] Integration.
"
40,"8.  ### Question8
"
41,"- [ ] Making decisions as soon as possible to close feedback loops as soon as possible.
"
42,"- [x] Discover decisions to be made as soon as possible but postpone deciding to the latest reasonable moment.
"
43,"- [x] The last moment in a Sprint when code changes are allowed, after this only stabilization work should be conducted.
"
44,"- [ ] Opening a learning window to validate hypotheses and create learning.
"
45,"- [ ] The last moment a Developer is responsible for quality, after this the Tester is responsible.
"
46,"9.  ### Question9
"
47,"- [ ] Includes exercising the persistence layer.
"
48,"- [x] Makes assertions about only one logical concept.
"
49,"- [x] Independent of others.
"
50,"- [x] Test code is as small as possible.
"
51,"- [x] Execution is fast.
"
52,"10. ### Question10
"
53,"- [ ] Because the test has not been refactored.
"
54,"- [ ] Because it has to be put into an automated test harness to be run.
"
55,"- [ ] Because the tests are checked in before the Product code exists.
"
56,"- [x] Because the Product code to satisfy the test does not yet exist.
"
57,"11. ### Question11
"
58,"- [ ] Whenever the Product Owner asks.
"
59,"- [ ] During the Sprint Review.
"
60,"- [ ] Anytime the Developers need feedback from the Product Owner.
"
61,"- [x] All of the above.
"
62,"12. ### Question12
"
63,"- [ ] It is a great way for Testers to contribute early in the Sprint as they can start creating all the tests from the beginning on.
"
64,"- [ ] It makes Integration Tests obsolete and by doing so saves a lot of time.
"
65,"- [x] It helps break down complex problems into smaller ones that are much easier to be tackled.
"
66,"- [ ] It increases collaboration between Developers as it requires Pair Programming.
"
67,"- [x] It might lead to better code as refactoring is part of the TDD cycle.
"
68,"- [x] It helps to identify gaps in understanding the desired behavior.
"
69,"13. ### Question13
"
70,"- [ ] The Architect chosen by the Scrum Team.
"
71,"- [ ] The Software Architect assigned to the Scrum Team.
"
72,"- [x] The Developers with input from the Scrum Team and others.
"
73,"- [ ] The Chief Architect.
"
74,"14. ### Question14
"
75,"- [ ] Once per hour.
"
76,"- [x] Whenever new or changed code is checked into version control.
"
77,"- [ ] Once per day.
"
78,"- [ ] Before the end of the Sprint.
"
79,"- [ ] Whenever new tests are created or uncertainty arises about whether old tests will pass.
"
80,"15. ### Question15
"
81,"- [ ] Readability of code is improved.
"
82,"- [x] Know immediately how a change affected the Product.
"
83,"- [ ] The feature-branch is generally kept in a buildable.
"
84,"- [x] Reduce effort and risk when integrating changes.
"
85,"16. ### Question16
"
86,"- [ ] The Scrum Master.
"
87,"- [ ] The Scrum Team.
"
88,"- [ ] Team Manager.
"
89,"- [ ] Subject matter experts.
"
90,"- [x] The Developers.
"
91,"17. ### Question17
"
92,"- [ ] The Product Owner.
"
93,"- [x] The Developers.
"
94,"- [ ] Quality Assurance Specialists.
"
95,"- [ ] The Scrum Master.
"
96,"18. ### Question18
"
97,"- [x] Creating tests before satisfying them.
"
98,"- [ ] Testing existing code before adding more code to it.
"
99,"- [ ] Having the Tester in the Scrum Team write the test plans before coding.
"
100,"- [ ] The continuous restructuring of Software to retain flexibility.
"
101,"19. ### Question19
"
102,"- [ ] A spreadsheet of passing manual tests.
"
103,"- [ ] The Developer's whiteboard.
"
104,"- [ ] UML model.
"
105,"- [ ] Release notes.
"
106,"- [ ] A help file.
"
107,"- [x] A passing test harness with clear naming and vocabulary.
"
108,"20. ### Question20
"
109,"- [ ] Revise the tests so that the bug no longer appears on the bug report.
"
110,"- [ ] Fix the bug.
"
111,"- [x] Talk to the Product Owner.
"
112,"- [ ] Stub out the code that caused the bug so it no longer occurs.
"
113,"21. ### Question21
"
114,"- [ ] The Scrum Master.
"
115,"- [ ] The Stakeholders.
"
116,"- [ ] The Scrum Team.
"
117,"- [ ] The Developers.
"
118,"- [x] The Product Owner.
"
119,"22. ### Question22
"
120,"- [x] A Unit Test isolates a specific system behavior.
"
121,"- [x] An Integration Test usually focuses on the integration of two or more units.
"
122,"- [ ] A Unit Test is automated.
"
123,"- [ ] An Integration Test runs overnight.
"
124,"- [ ] A Unit Test only runs on a Developer's workstation.
"
125,"23. ### Question23
"
126,"- [ ] 100%.
"
127,"- [ ] Enough so that the Product Owner is not surprised by the value delivered by the Increment.
"
128,"- [ ] 40%, or more if the Stakeholders agree.
"
129,"- [x] Any amount of time the Developers ask the Product Owner to be present.
"
130,"24. ### Question24
"
131,"- [ ] Product Owner and Developer.
"
132,"- [ ] Business Analyst and Developer.
"
133,"- [ ] Tester and Developer.
"
134,"- [x] Driver and Navigator.
"
135,"- [ ] Frontend and Backend.
"
136,"25. ### Question25
"
137,"- [ ] True.
"
138,"- [x] False.
"
139,"26. ### Question26
"
140,"- [ ] Scrum is for functional, front-end development only.
"
141,"- [x] Important, recurring non-functional requirements can be added to the Definition of Done.
"
142,"- [ ] Discuss them during a risk mitigation phase before development.
"
143,"- [x] Include them in the Product Backlog.
"
144,"- [x] Specific expectations can be used as Acceptance Criteria to specific Product Backlog items.
"
145,"- [ ] Before the release, they should be tested and validated in a hardening Sprint.
"
146,"27. ### Question27
"
147,"- [ ] Ensuring that all factors are constantly aligned.
"
148,"- [ ] Removing all bugs that were found during Regression Tests.
"
149,"- [x] Making sure that the code is readable and maintainable.
"
150,"- [ ] Creating better technical documentation.
"
151,"28. ### Question28
"
152,"- [x] Expected results and observed results.
"
153,"- [x] Includes build or version number where bug was found.
"
154,"- [ ] Includes code for a proposed fix.
"
155,"- [x] Provides simple and repeatable reproduction steps.
"
156,"- [x] Screenshots or other pictures of the bug in action.
"
157,"- [ ] Explains some new system functionality desired.
"
158,"29. ### Question29
"
159,"- [ ] Regression Testing.
"
160,"- [ ] Object oriented requirements definition.
"
161,"- [x] Acceptance Test Driven Development.
"
162,"- [ ] Behavior Driven Development.
"
163,"30. ### Question30
"
164,"- [x] A test object that mimics the behavior of a dependency in the system under test.
"
165,"- [ ] A mock helps you create a build script.
"
166,"- [ ] Mocks, stubs, dummies, fakes, and shims are all the same.
"
167,"- [ ] A mock is a way to initialize the database for testing.
"
168,"31. ### Question31
"
169,"- [x] It improves quality and reduces bugs.
"
170,"- [x] It reduces the cost of maintenance over time.
"
171,"- [x] It promotes good design and separation of concerns.
"
172,"- [ ] It ensures no defects are present in the code.
"
173,"- [x] It causes you to construct a test harness that can be automated.
"
174,"32. ### Question32
"
175,"- [x] Vague statements or untested assumptions.
"
176,"- [x] Generic titles.
"
177,"- [ ] Simple and repeatable reproduction steps.
"
178,"- [x] Assigning blame.
"
179,"- [ ] One bug per report.
"
180,"33. ### Question33
"
181,"- [x] Yes, there is nothing in Scrum that conflicts with Continuous Delivery.
"
182,"- [ ] No, because the Product Owner may not be available each time a PBI is done and the Product Owner has to decide if it should be released.
"
183,"- [ ] No, because the increment has to be approved at the Sprint Review before it can be released, and a 2-week Sprint would not be considered continuous.
"
184,"- [ ] No, because Stakeholders may have already seen the new features and the Sprint Review will be meaningless.
"
185,"- [ ] No, because before releasing an Increment it first has to fulfill the Definition of Done.
"
186,"34. ### Question34
"
187,"- [ ] At least 50% of Application X functions correctly.
"
188,"- [ ] At least 50% of Application X functions correctly.
"
189,"- [ ] There are no bugs present in Application X.
"
190,"- [x] You did not break any existing Unit Tests.
"
191,"35. ### Question35
"
192,"- [ ] They are addressed by a separate team who is responsible for compliance issues.
"
193,"- [x] They are addressed along with functional development of the Product.
"
194,"- [x] They are discussed, determined, and documented before the actual feature development Sprints.
"
195,"- [ ] They are added to the Product Backlog and addressed in early Sprints, while always requiring at least some business functionality. no matter how small.
"
196,"36. ### Question36
"
197,"- [ ] True.
"
198,"- [x] False.
"
199,"37. ### Question37
"
200,"- [ ] Code with low Cyclomatic Complexity.
"
201,"- [x] Code with minimal duplication.
"
202,"- [ ] Code that has not been peer reviewed.
"
203,"- [ ] Code that has been peer reviewed.
"
204,"38. ### Question38
"
205,"- [ ] All Scrum Teams work in their own version control branch.
"
206,"- [ ] Code is merged at the Scrum of Scrums.
"
207,"- [x] The Scrum Teams must integrate their work before the end of the Sprint.
"
208,"- [x] The Scrum Teams coordinate their work to deliver a single Increment.
"
209,"- [ ] Each Scrum Team should have a different Product Owner.
"
210,"39. ### Question39
"
211,"- [x] A style of Test Driven Development focusing on user and system interactions.
"
212,"- [ ] A development style that accounts for leadership style among team members.
"
213,"- [ ] A way to organize Unit Tests based on class and method structures.
"
214,"- [ ] A technique for maintaining Regression Test harnesses.
"
215,"40. ### Question40
"
216,"- [x] They ask questions in order to clarify the intent of Product Backlog items.
"
217,"- [ ] They do not. The Developers are only responsible for prioritizing technical work.
"
218,"- [ ] They do not. The Scrum Master and the Product Owner are responsible for Product Backlog Refinement.
"
219,"- [x] They give input on technical dependencies.
"
220,"- [x] They may update estimates for Product Backlog items.
"
221,"41. ### Question41
"
222,"- [ ] Just before the Product is released.
"
223,"- [ ] Before writing the first line of code.
"
224,"- [ ] When the Product Owner asks for a build.
"
225,"- [ ] Just before the end of the Sprint.
"
226,"- [x] As soon as there is code in the Version Control System.
"
227,"42. ### Question42
"
228,"- [ ] Design Pattern selection.
"
229,"- [x] Scalability.
"
230,"- [ ] Build.
"
231,"- [x] Aunoes. (TODO: missing the word, but that's the correct answer, too)
"
232,"43. ### Question43
"
233,"- [ ] A proportional amount of time on analysis, design, development, and testing.
"
234,"- [ ] All development work and at least some testing.
"
235,"- [ ] As much as they can fit into the Sprint, with remaining work deferred to the next Sprint.
"
236,"- [x] As much as s required to meet the Scrum Team's Definition of Done.
"
237,"44. ### Question44
"
238,"- [ ] Information sharing and learning.
"
239,"- [ ] Improving Code Quality.
"
240,"- [ ] Efficiency.
"
241,"- [ ] It can be a fun way to work.
"
242,"- [x] All of the above.
"
243,"45. ### Question45
"
244,"- [x] Models are not used by agile teams.
"
245,"- [ ] Models are maintained along with the Software as it emerges.
"
246,"- [ ] Models are assembly instructions for the Developers.
"
247,"- [ ] Modeling may be useful to increase shared understanding.
"
248,"46. ### Question46
"
249,"- [x] Continuous Integration / Continuous Deployment / Continuous Delivery.
"
250,"- [ ] Blue-Green Deployment.
"
251,"- [ ] Hypothesis Driven Development.
"
252,"- [ ] Vertical Teams.
"
253,"- [ ] Blameless Postmortem.
"
254,"- [ ] All of the above.
"
255,"47. ### Question47
"
256,"- [x] Write the minimum amount of Product code to satisfy the test.
"
257,"- [ ] Refactor the test so the code passes.
"
258,"- [ ] Run it again to make sure it really fails.
"
259,"- [ ] Implement the required functionality.
"
260,"- [ ] Meet with the Business Analyst to ensure that the test is correct.
"
261,"48. ### Question48
"
262,"- [ ] Create teams based on their skills across multiple layers (such as database, Ul, etc.).
"
263,"- [x] Ask the people to divide themselves info teams.
"
264,"- [ ] Ask the Product Owner to assign the people to teams.
"
265,"49. ### Question49
"
266,"- [ ] Stop using Scrum until the impediment is resolved.
"
267,"- [ ] Complete the work that can be done and complete the remainder during the hardening Sprint.
"
268,"- [x] Immediately raise the issue to the Scrum Master.
"
269,"- [ ] Cancel the Sprint.
"
270,"- [ ] Drop the Product Backlog items affected by the impediment from the Sprint Plan.
"
271,"50. ### Question50
"
272,"- [ ] A test of the user interface.
"
273,"- [ ] A test runs during a Continuous Integration build.
"
274,"- [ ] A test of a single unit of functionality.
"
275,"- [x] A test of multiple units of functionality.
"
276,"51. ### Question51
"
277,"- [ ] The first set of practices a team should apply before moving to the second way.
"
278,"- [x] Using automated build and release pipelines.
"
279,"- [ ] To deliver value earlier and more frequently.
"
280,"- [ ] A tool-focused way of introducing DevOps, compared to a mindset way (second way) and organizational structure (third way).
"
281,"- [ ] A culture of continuous experimentation and learning.
"
282,"52. ### Question52
"
283,"- [x] It might be a subject of discussion during Sprint Retrospective.
"
284,"- [ ] It is the sole responsibility of the Developers to define it.
"
285,"- [ ] It is synonymous with Acceptance Criteria.
"
286,"- [ ] It can only be extended; nothing can be removed.
"
287,"- [x] It defines a state when the entire Increment is releasable.
"
288,"53. ### Question53
"
289,"- [ ] Ask the Product Owner to specify a Definition of Done.
"
290,"- [ ] Create a unique completion checklist for each item in the Sprint.
"
291,"- [x] Specify a shared Definition of Done.
"
292,"- [ ] Ask the Scrum Master what they should do.
"
293,"54. ### Question54
"
294,"- [ ] The Scrum Master adds additional Developers for Sprint 8.
"
295,"- [ ] The Developers carry over incomplete Sprint Backlog items from Sprint 7 to Sprint 8 and monitor the Sprint 8 burn-down chart. As soon as deviation from trends is detected, the Developers work with the Product Owner to negotiate remaining work.
"
296,"- [ ] There is nothing wrong The Developers will present all Product Backlog items selected for Sprint 7 at the end of the Sprint.
"
297,"- [x] The Developers may forecast less overall work in Sprint 8.
"
298,"- [ ] Stakeholders will encourage the Scrum Team to estimate better during the Sprint 8.
"
299,"- [x] Planning Meeting The Developers put incomplete Product Backlog items back into the Product Backlog for re-ordering. The Product Owner may ask the Developers to complete the unfinished Product Backlog items from Sprint 7 in Sprint 8.
"
300,"55. ### Question55
"
301,"- [ ] True.
"
302,"- [x] False.
"
303,"56. ### Question56
"
304,"- [x] UML Model.
"
305,"- [ ] A help file.
"
306,"- [ ] Release note.
"
307,"- [ ] A passing test harness it clear naming and vocabulary.
"
308,"- [ ] Spreadsheet of passing manual tests.
"
309,"- [ ] The development team’s whiteboard.
"
310,"57. ### Question57
"
311,"- [x] Opportunities to inspect and adapt in the Sprint Backlog are lost.
"
312,"- [ ] The Scrum Master loses the ability to update the Gantt Chart properly.
"
313,"- [ ] Too much work is spent updating the Scrum Board before meeting.
"
314,"- [x] Sprint Plan may become inaccurate.
"
315,"- [x] Impediments are raised and resolved more slowly.
"
316,"- [ ] The Product Owner cannot accurately report to the Stakeholders.
"
317,"58. ### Question58
"
318,"- [ ] Release Burnup Chart.
"
319,"- [ ] Burndown Chart.
"
320,"- [ ] Unit Tests.
"
321,"- [ ] Critical Path Analysis.
"
322,"- [ ] Refactoring.
"
323,"- [ ] Build automation.
"
324,"- [x] None of the above.
"
325,"59. ### Question59
"
326,"- [ ] The Scrum Master.
"
327,"- [x] The Scrum Team.
"
328,"- [ ] The Development Team.
"
329,"- [ ] The Product Owner.
"
330,"60. ### Question60
"
331,"- [ ] Frontend and Backend Developers.
"
332,"- [ ] Tester and Developer.
"
333,"- [ ] Developer and Scrum Master.
"
334,"- [x] Two persons working on the same PBI.
"
335,"61. ### Question61
"
336,"- [x] Starting development of a Software Product requires a clear understanding of the underlying Software Architecture and Emergent Architecture describes the process of creating this initial architecture.
"
337,"- [ ] The Software Architecture emerges solely decisions the Developers make from a technical perspective.
"
338,"- [ ] In Scrum there is no Architecture-Role therefore architecture emerges naturally.
"
339,"- [ ] The desire to make decisions easier to change in the future and find the best possible point in time to make decisions.
"
340,"- [ ] Enterprise Architects must be involved to create the foundation of each Software Product.
"
341,"62. ### Question62
"
342,"- [ ] To make it easy to distinguish between different Software Products.
"
343,"- [x] To make the code more readable.
"
344,"- [ ] To communicate the identity of the Developer who worked on the code.
"
345,"- [ ] To reduce friction in a shared codebase.
"
346,"- [x] To ensure that abandoned functions are not created.
"
347,"63. ### Question63
"
348,"- [x] Yes, because the changes you make are much smaller and it is easier to fix problems.
"
349,"- [ ] No, because each release means a risk to break something so releasing more frequently would increase the risk.
"
350,"- [ ] Yes, because frequent release encourage the Developers to automate the release process.
"
351,"- [x] Yes, because you get earlier feedback and can learn faster.
"
352,"- [ ] No, the only way to tackle these risks is by extensive risk management.
"
353,"- [ ] No, because releasing needs extensive testing which cannot be conducted frequently.
"
354,"64. ### Question64
"
355,"- [ ] True.
"
356,"- [x] False.
"
357,"65. ### Question65
"
358,"- [x] Often, throughout development of the Software.
"
359,"- [ ] Just before deploying to Production.
"
360,"- [ ] After coding is complete.
"
361,"- [ ] In Production.
"
362,"66. ### Question66
"
363,"- [ ] The Product is released at the end of every Sprint.
"
364,"- [x] Acceptance Tests pass.
"
365,"- [x] Code Review is done.
"
366,"- [ ] Regression Tests pass.
"
367,"- [x] No impediments exist.
"
368,"67. ### Question67
"
369,"- [x] Improves quality in the requirement itself.
"
370,"- [x] Clear Acceptance Criteria for each feature.
"
371,"- [ ] Using a code generation tool, the solution can be generated from the requirements model.
"
372,"- [ ] Promotes the use of DRY principle.
"
373,"- [x] Tracking of competencies.
"
374,"68. ### Question68
"
375,"- [ ] Function Points.
"
376,"- [x] Cyclomatic Complexity.
"
377,"- [ ] Depth of Inheritance.
"
378,"69. ### Question69
"
379,"- [ ] The Scrum Master requires it.
"
380,"- [x] It is required by the Definition of Done.
"
381,"- [x] The documentation is used to enhance and maintain the Software.
"
382,"- [ ] The Software tool being used requires it.
"
383,"- [ ] It has always been documented in the past.
"
384,"70. ### Question70
"
385,"- [x] The need of the team to learn on doing work and measuring results.
"
386,"- [ ] The frequency at which team formation can be changed.
"
387,"- [ ] The organization release schedule.
"
388,"- [ ] The organization has mandated similar length Sprints.
"
389,"71. ### Question71
"
390,"- [ ] It only provide insights for programmers.
"
391,"- [x] It does not ensure that the most important or highest risk areas of the code are being exercised by the tests.
"
392,"- [x] It could create incentives to write tests that simply increase Code Coverage, rather than tests that find bugs without increasing coverage.
"
393,"- [ ] It is too complicated to explain to Management.
"
394,"- [x] Developers could stop adding more valuable tests once the target coverage is achieved.
"
395,"72. ### Question72
"
396,"- [ ] Build.
"
397,"- [x] Security.
"
398,"- [ ] Design Pattern selection.
"
399,"- [x] Scalability.
"
400,"73. ### Question73
"
401,"- [x] True.
"
402,"- [ ] False.
"
403,"74. ### Question74
"
404,"- [ ] Put them on a separate list on the Scrum board, available for all to see.
"
405,"- [x] Add them to the Product Backlog and keep the Product Owner posted on the expected effort.
"
406,"- [ ] Run the Integration and Regression Tests before the end of the Sprint, and capture the open work for the Sprint Backlog of the next Sprint.
"
407,"- [x] Add them to the Definition of Done so the work is taken care of every Sprint.
"
408,"75. ### Question75
"
409,"- [x] There are no such activities. The next Sprint starts immediately after the current Sprint.
"
410,"- [ ] Work with the Quality Assurance departments on the Increment of the current Sprint.
"
411,"- [ ] Refine the Product Backlog.
"
412,"- [ ] Update the project plan with Stakeholders.
"
413,"76. ### Question76
"
414,"- [ ] Ensure the Scrum Team members have compatible personalities.
"
415,"- [ ] Introduce a bonus system for the top performers in the team.
"
416,"- [x] Ensure the team understands they need a Definition of Done.
"
417,"- [ ] Have the development managers for each Development Team member introduce their direct reports and go over their responsibilities on the Scrum Team.
"
418,"- [x] Ask the Product Owner to discuss the Product, its vision, history, goals, and context, as well as answer questions.
"
419,"77. ### Question77
"
420,"- [x] It contains all foreseeable tasks and requirements from which the Scrum team can develop and maintain a complete project plan.
"
421,"- [ ] It is allowed to grow and change as more is learned about the Product and its customers.
"
422,"- [ ] It is baselined to follow change management processes.
"
423,"- [ ] It provides just enough information to enable a Scrum team to start the design phase of a Product.
"
424,"78. ### Question78
"
425,"- [ ] Verifying the work of programmers.
"
426,"- [x] Scrum has no ""Tester"" role.
"
427,"- [ ] Finding bugs.
"
428,"- [x] Everyone in the Development Team is responsible for quality.
"
429,"- [ ] Tracking quality metrics.
"
430,"79. ### Question79
"
431,"- [ ] A few of the Development Team members pair program and do Test Driven Development.
"
432,"- [x] Development Team has all the skills to create a potentially releasable increment by the end of every Sprint.
"
433,"- [ ] Every member of the Development Team is able to perform every task.
"
434,"- [ ] There are no conflicts within the Development Team.
"
435,"80. ### Question80
"
436,"- [x] When the Product Owner asks to create one.
"
437,"- [ ] At the end of every Sprint.
"
438,"- [ ] Before the release Sprint.
"
439,"- [ ] Every 3 Sprints.
"
440,"- [ ] After the Acceptance Testing phase.
"
441,"81. ### Question81
"
442,"- [ ] The Development Team inviting external people to the Sprint Planning to ask them how to turn a Product Backlog item into an Increment via a complete and detailed Sprint Backlog.
"
443,"- [ ] The Development Team members are working within the boundaries of their functional description and nicely handing off work from analyst to Developer to Tester to integration.
"
444,"- [ ] The Product Owner doesn't need to be at Sprint Retrospectives.
"
445,"- [ ] Stakeholders walking in at the Daily Scrum to check progress and work with the Scrum Master to optimize the functional scope for the Sprint.
"
446,"- [x] Development Team members collaboratively selecting their own work during the Sprint.
"
447,"- [ ] The Scrum Master is no longer needed.
"
448,"- [x] The Development Team has all the skills needed to create a releasable Increment.
"
449,"- [x] The Development Team creating their own Sprint Backlog, reflecting all work that is part of the Definition of Done.
"
450,"82. ### Question82
"
451,"- [ ] To take time to judge the validity of the project.
"
452,"- [x] To inspect the Product Increment with the Stakeholders and collect feedback on next steps.
"
453,"- [ ] To review the Scrum Team's activities and processes during the Sprint.
"
454,"- [ ] To build team spirit.
"
455,"83. ### Question83
"
456,"- [ ] True.
"
457,"- [x] False.
"
458,"84. ### Question84
"
459,"- [ ] It is the Development Team's plan for the Sprint.
"
460,"- [ ] Every item has a designated owner.
"
461,"- [x] It is a complete list of all work to be done in a Sprint.
"
462,"- [ ] Each task is estimated in hours.
"
463,"- [ ] It is ordered by the Product Owner.
"
464,"85. ### Question85
"
465,"- [ ] It provides a template for elements that need to be included in the technical documentation.
"
466,"- [ ] It guides the Development Team in creating a forecast at the Sprint Planning.
"
467,"- [x] It controls whether the Developers have performed their tasks.
"
468,"- [x] It creates transparency over the work inspected at the Sprint Review.
"
469,"- [ ] It defines what it takes for an Increment to be ready for release.
"
470,"- [ ] It tracks the percentage complete of a Product Backlog item.
"
471,"86. ### Question86
"
472,"- [x] The Sprint Goal.
"
473,"- [ ] Sprint Review minutes.
"
474,"- [ ] The Release Plan.
"
475,"- [ ] The Sprint Backlog.
"
476,"87. ### Question87
"
477,"- [ ] True, but only after confirmation by the resource manager that the Team has enough capacity.
"
478,"- [ ] False, capacity and commitment are the Project Manager's responsibility.
"
479,"- [ ] False, the Scrum Master does that.
"
480,"- [ ] True.
"
481,"- [ ] True, accordingly to what was committed to the Stakeholders.
"
482,"- [x] False.
"
483,"88. ### Question88
"
484,"- [ ] The Scrum Team.
"
485,"- [ ] The Scrum Master.
"
486,"- [x] The Development Team.
"
487,"- [ ] The Product Owner.
"
488,"89. ### Question89
"
489,"- [x] When the item has no work remaining in order to be potentially released.
"
490,"- [ ] When Quality Assurance reports that the item passes all Acceptance Criteria.
"
491,"- [ ] At the end of the Sprint.
"
492,"- [ ] When all work in the Sprint Backlog related to the item is finished.
"
493,"90. ### Question90
"
494,"- [x] The Scrum Master teaches the Development Team to keep the Scrum meetings to their time-box.
"
495,"- [ ] The Scrum Master is responsible for updating the Sprint Burndown.
"
496,"- [ ] The Scrum Master assigns tasks to Development Team members when they need work.
"
497,"- [x] The Scrum Master helps those outside the team interact with the Scrum Team.
"
498,"- [ ] At the Sprint Review, the Scrum Master identifies what has been ""Done"" and what has not been ""Done"".
"
499,"91. ### Question91
"
500,"- [ ] Documenting Acceptance Criteria for items in the next Sprint.
"
501,"- [ ] The order of items in the Product Backlog.
"
502,"- [x] Identifying high priority process improvements for the next Sprint.
"
503,"- [x] How the team collaborates.
"
504,"92. ### Question92
"
505,"- [ ] True.
"
506,"- [x] False.
"
507,"93. ### Question93
"
508,"- [ ] During Sprint Planning.
"
509,"- [ ] Prior to starting a new project.
"
510,"- [ ] Prior to starting a new Sprint.
"
511,"- [x] During the Sprint Retrospective.
"
512,"94. ### Question94
"
513,"- [ ] Nominate a proxy Product Owner.
"
514,"- [x] Coach the Product Owner in the values of Scrum and incremental delivery.
"
515,"- [ ] Stop the Sprint, send the Product Owner to a course and restart.
"
516,"- [ ] Inform the Product Owner's functional manager.
"
517,"- [x] Bring up the problem in the Sprint Retrospective.
"
518,"95. ### Question95
"
519,"- [ ] Ask the Development Team members to alternate who is responsible for meeting setup.
"
520,"- [ ] Set up the meeting and tell the Development Team that is how it will be done.
"
521,"- [ ] Inform Management and ask them to solve it.
"
522,"- [x] Allow the Development Team to self-manage and determine for itself what to do.
"
523,"96. ### Question96
"
524,"- [ ] Teach the Product Owner to work with the lead Developers on ordering Product Backlog in a way to avoid too much technical and development overlap during a Sprint.
"
525,"- [x] Collect the Sprint tasks from the teams at the end of their Sprint Planning and merge that into a consolidated plan for the entire Sprint.
"
526,"- [ ] Teach them that it is their responsibility to work with the other teams to create an integrated Increment.
"
527,"- [ ] Visit the five teams each day to inspect that their Sprint Backlogs are aligned.
"
528,"97. ### Question97
"
529,"- [ ] True.
"
530,"- [x] False.
"
531,"98. ### Question98
"
532,"- [ ] Ask everyone to take as much time as needed to analyze the Product Backlog first, and then reconvene another Sprint Planning meeting.
"
533,"- [ ] Cancel the Sprint. Send the entire team to an advanced Scrum training and then start a new Sprint.
"
534,"- [x] Forecast the most likely Product Backlog items to meet the goal and create a Sprint Backlog based on a likely initial design and plan. Once the time-box for the Sprint Planning meeting is over, start the Sprint and continue to analyze, decompose, and create additional functionality during the Sprint.
"
535,"- [ ] Continue the Sprint Planning meeting past its time-box until an adequate number of Product Backlog items are well enough understood for the Development Team to make a complete forecast. Then start the Sprint.
"
536,"- [x] Discuss in the upcoming Sprint Retrospective why this happened and what changes will make it less likely to recur.
"
537,"99. ### Question99
"
538,"- [ ] Create a Product Backlog item for security.
"
539,"- [x] Ask the person to share the issue with the team as soon as possible.
"
540,"- [ ] Add security to the Definition of Done.
"
541,"- [ ] Tell the Product Owner to stop further development of features until the issues are fixed.
"
542,"- [ ] Go check with the Testers.
"
543,"100.  ### Question100
"
544,"- [x] They are implemented along with functional development of the Product.
"
545,"- [ ] They are built by a separate team through the creation of an architectural runway.
"
546,"- [x] They are added to the Product Backlog and addressed in early Sprints, while always requiring at least some business functionality, no matter how small.
"
547,"- [ ] They are discussed, determined, and documented before the actual feature development Sprints.
"
548,"101.  ### Question101
"
549,"- [ ] By preventing Stakeholders from entering the development room.
"
550,"- [x] By removing titles for Development Team members.
"
551,"- [ ] By not allowing documentation.
"
552,"- [x] By being a lightweight framework.
"
553,"- [ ] By the Development Team deciding what work to do in a Sprint.
"
554,"102.  ### Question102
"
555,"- [x] False.
"
556,"- [ ] True.
"
557,"103.  ### Question103
"
558,"- [ ] Increased accuracy of estimates.
"
559,"- [ ] Increased rule compliance.
"
560,"- [x] Increased self-accountability.
"
561,"- [x] Increased creativity.
"
562,"- [x] Increased commitment.
"
563,"104.  ### Question104
"
564,"- [ ] A Sprint Goal ensures that all of the Product Backlog items selected for the Sprint are implemented.
"
565,"- [x] The Development Team is more focused with a common yet specific goal.
"
566,"- [ ] Sprint Goals are not valuable. Everything is known from the Product Backlog.
"
567,"- [ ] A Sprint Goal only gives purpose to Sprint 0.
"
568,"105.  ### Question105
"
569,"- [ ] The Product Owner should provide each team with its own Product Backlog.
"
570,"- [x] The Development Teams pull in work in agreement with the Product Owner.
"
571,"- [ ] Each Scrum Team takes an equal numbers of items.
"
572,"- [ ] The Scrum Team with the highest velocity pulls Product Backlog items first.
"
573,"- [ ] The Product Owner decides.
"
574,"106.  ### Question106
"
575,"- [x] A Software Development technique based on automated tests.
"
576,"- [ ] A predictable way to develop working, well-organized code.
"
577,"- [ ] Having Testers in the development process.
"
578,"- [ ] An Increment and emergent approach to Software Design.
"
579,"- [ ] Creating a manual test script before writing code.
"
580,"107.  ### Question107
"
581,"- [ ] The person who broke the build.
"
582,"- [ ] The next person who needs the build to complete successfully.
"
583,"- [ ] The person assigned to the configuration management role within the team.
"
584,"- [ ] The Tester responsible for validating builds.
"
585,"- [x] Whoever the Developers agree should fix it.
"
586,"108.  ### Question108
"
587,"- [ ] Establish base system architecture and design, install version control and continuous integration setup.
"
588,"- [x] There is no such thing as Sprint 0.
"
589,"- [ ] Base system architecture and design.
"
590,"- [ ] Overall planning, base system architecture, base design, version control and continuous integration setup.
"
591,"- [ ] Requirements gathering, version control setup, and continuous integration setup.
"
592,"109.  ### Question109
"
593,"- [ ] The Developers.
"
594,"- [ ] The Product Owner.
"
595,"- [x] The Scrum Team.
"
596,"- [ ] The Business Analyst and the Product Owner.
"
597,"110.  ### Question110
"
598,"- [ ] The Architect chosen by the Scrum Team.
"
599,"- [x] The Developers.
"
600,"- [ ] The Software Architect.
"
601,"- [ ] The Corporate Architect.
"
602,"111.  ### Question111
"
603,"- [ ] Simple and repeatable reproduction steps.
"
604,"- [x] Vague statements or untested assumptions.
"
605,"- [x] Generic titles.
"
606,"- [ ] One bug per report.
"
607,"- [x] Assigning blame.
"
608,"112.  ### Question112
"
609,"- [x] The Developers.
"
610,"- [ ] Coders.
"
611,"- [ ] The Scrum Master.
"
612,"- [ ] Quality Assurance Specialists.
"
613,"113.  ### Question113
"
614,"- [x] Anytime during the Sprint.
"
615,"- [ ] Never. It is the sole responsibility of the Product Owner to refine the Product Backlog.
"
616,"- [ ] Only during Refinement sessions planned by the Product Owner.
"
617,"- [ ] As Part 1 of Sprint Planning.
"
618,"114.  ### Question114
"
619,"- [ ] The integration architects from the release department.
"
620,"- [ ] Only the most senior Developers.
"
621,"- [x] Anyone that the Scrum Team decides will be valuable during Refinement.
"
622,"- [ ] The Stakeholders.
"
623,"- [ ] The external Business Analysts that have prepared the functional details.
"
624,"115.  ### Question115
"
625,"- [ ] True.
"
626,"- [x] False.
"
627,"116.  ### Question116
"
628,"- [ ] Without them you cannot tell if your code works.
"
629,"- [ ] You are unable to check-in code without one.
"
630,"- [ ] They are part of your done criteria.
"
631,"- [x] They provide rapid assurance that defects and configuration management issues have not been introduced.
"
632,"117.  ### Question117
"
633,"- [ ] Defined.
"
634,"- [x] Empirical.
"
635,"- [ ] Complex.
"
636,"- [ ] Hybrid.
"
637,"118.  ### Question118
"
638,"- [x] When the Sprint Goal becomes obsolete.
"
639,"- [ ] When the sales department has an important new opportunity.
"
640,"- [ ] When the Developers feel that the work is too hard.
"
641,"- [ ] When it becomes clear that not everything will be finished by the end of the Sprint.
"
642,"119.  ### Question119
"
643,"- [ ] The Scrum Master.
"
644,"- [ ] The Project Manager.
"
645,"- [x] The Product Owner.
"
646,"- [ ] The Developers.
"
647,"120.  ### Question120
"
648,"- [ ] Each Scrum Team defines and uses its own. The differences are discussed and reconciled during a
"
649,"- [ ] The Scrum Masters from each Scrum Team define a common Definition of Done.
"
650,"- [ ] Each Scrum Team uses its own, but must make their definition clear to all other teams so the differences are known.
"
651,"- [x] All Scrum Teams must have a Definition of Done that makes their combined Increment valuable and useful.
"
652,"121.  ### Question121
"
653,"- [x] The Product Owner and the Developers.
"
654,"- [ ] The Scrum Master, the project manager, and the Developers.
"
655,"- [ ] The Product Owner and all Stakeholders.
"
656,"- [ ] The Developers.
"
657,"122.  ### Question122
"
658,"- [ ] As needed, with no special allowance for changes in productivity.
"
659,"- [ ] Never, it reduces productivity.
"
660,"- [x] As needed, while taking into account a short-term reduction in productivity.
"
661,"- [ ] Every Sprint to promote shared learning.
"
662,"123.  ### Question123
"
663,"- [ ] When all Product Backlog items meet their Definition of Done.
"
664,"- [x] When the timebox expires.
"
665,"- [ ] When the Product Owner says it is done.
"
666,"- [ ] When all the tasks are completed.
"
667,"124.  ### Question124
"
668,"- [ ] Immediately following the next Sprint Planning.
"
669,"- [x] Immediately after the conclusion of the previous Sprint.
"
670,"- [ ] When the Product Owner is ready.
"
671,"- [ ] Next Monday.
"
672,"125.  ### Question125
"
673,"- [ ] The event must happen at a set time.
"
674,"- [x] The event can take no more than a maximum amount of time.
"
675,"- [ ] The event must happen by a given time.
"
676,"- [ ] The event must take at least a minimum amount of time.
"
677,"126.  ### Question126
"
678,"- [ ] The Developers and Product Owner.
"
679,"- [x] The Developers.
"
680,"- [ ] The Developers and Scrum Master.
"
681,"- [ ] The Scrum Master and Product Owner.
"
682,"- [ ] The Scrum Team.
"
683,"127.  ### Question127
"
684,"- [ ] Whenever a team member can accommodate more work.
"
685,"- [ ] At the Sprint Planning Event.
"
686,"- [ ] During the Daily Scrum.
"
687,"- [x] Never. The entire Scrum Team is accountable for creating value every Sprint.
"
688,"128.  ### Question128
"
689,"- [ ] Project Manager.
"
690,"- [x] Developers.
"
691,"- [x] The Product Owner.
"
692,"- [x] The Scrum Master.
"
693,"129.  ### Question129
"
694,"- [ ] The Developers have all the skills they need to create a valuable, useful Increment.
"
695,"- [x] Stakeholders attend the Daily Scrum to check on the Scrum Team’s progress.
"
696,"- [ ] The Developers create their own Sprint Backlog, reflecting all work that is required to meet the Definition of Done.
"
697,"- [ ] The Developers are collaboratively selecting their own work during the Sprint.
"
698,"- [x] The Developers invite external Stakeholders to the Sprint Planning to ask them how to turn a Product Backlog item into an Increment via a complete and detailed Sprint Backlog.
"
699,"- [x] The Developers are working within the boundaries of their organizations functional description and nicely handing off work from analyst to Developer to Tester to integration.
"
700,"130.  ### Question130
"
701,"- [ ] As long as needed.
"
702,"- [ ] 2 hours.
"
703,"- [x] 4 hours for a monthly Sprint. For shorter Sprints it is usually shorter.
"
704,"- [ ] 4 hours and longer as needed.
"
705,"- [ ] 1 day.
"
706,"131.  ### Question131
"
707,"- [x] 8 hours for a monthly Sprint. For shorter Sprints it is usually shorter.
"
708,"- [ ] 4 hours.
"
709,"- [ ] Whenever it is done.
"
710,"- [ ] Monthly.
"
711,"132.  ### Question132
"
712,"- [x] True.
"
713,"- [ ] False.
"
714,"133.  ### Question133
"
715,"- [ ] Without a new vocabulary as a reminder of the change, very little change may actually happen.
"
716,"- [ ] The organization may not understand what has changed with Scrum and the benefits of Scrum may be lost.
"
717,"- [ ] Management may feel less anxious.
"
718,"- [x] All of the above.
"
719,"134.  ### Question134
"
720,"- [ ] The Scrum Team, in a collaborative effort where the result is the common denominator of all members' definitions.
"
721,"- [ ] The Scrum Master since they are responsible for the productivity of the Developers.
"
722,"- [ ] The Product Owner since they are responsible for the Product's success.
"
723,"- [x] If it is not an organizational standard, the Scrum Team must create a Definition of Done appropriate for the Product.
"
724,"135.  ### Question135
"
725,"- [x] The Developers.
"
726,"- [ ] The most junior member of the team.
"
727,"- [ ] The Scrum Master.
"
728,"- [ ] The Product Owner.
"
729,"136.  ### Question136
"
730,"- [x] The Product Owner.
"
731,"- [ ] The Stakeholders.
"
732,"- [ ] The Scrum Master.
"
733,"- [ ] The CEO.
"
734,"- [ ] The Developers.
"
735,"137.  ### Question137
"
736,"- [ ] Release Retrospective.
"
737,"- [x] Sprint Planning.
"
738,"- [ ] Sprint Testing.
"
739,"- [ ] Refinement.
"
740,"- [x] Sprint Retrospective.
"
741,"- [x] Sprint Review.
"
742,"- [ ] Release Testing.
"
743,"138.  ### Question138
"
744,"- [x] Product Owner.
"
745,"- [x] Scrum Master.
"
746,"- [ ] Customers.
"
747,"- [ ] Users.
"
748,"- [x] Developers.
"
749,"139.  ### Question139
"
750,"- [ ] Whenever a team member can accommodate more work.
"
751,"- [ ] During the Daily Scrum.
"
752,"- [ ] At the Sprint Planning event.
"
753,"- [x] Never. All Sprint Backlog items are ""owned"" by the Developers on the Scrum Team even though each item may be implemented by an individual Developer.
"
754,"140.  ### Question140
"
755,"- [x] Support the Product Owner with insights and information into high value Product and system capabilities. Support the Scrum Master to cause organizational change that fosters empiricism, self-management, bottom-up intelligence, and intelligent Product delivery.
"
756,"- [ ] Continually monitor staffing levels of the Scrum Team.
"
757,"- [ ] Monitor the progress of the Developers on the Scrum Team.
"
758,"- [ ] Identify and remove people that are not working hard enough.
"
759,"141.  ### Question141
"
760,"- [x] The consistency reduces complexity.
"
761,"- [ ] The place can be named.
"
762,"- [ ] The Product Owner demands it.
"
763,"- [ ] Rooms are hard to book and this lets it be booked in advance.
"
764,"142.  ### Question142
"
765,"- [ ] Short enough to keep the business risk acceptable to the Product Owner.
"
766,"- [ ] Short enough to be able to synchronize the development work with other business events.
"
767,"- [ ] One month or less.
"
768,"- [x] All of the above.
"
769,"143.  ### Question143
"
770,"- [x] Enough so that each Product Backlog item they select meets the Definition of Done.
"
771,"- [ ] Analysis, design, programming, testing and documentation.
"
772,"- [ ] As much as it can fit into the Sprint.
"
773,"- [ ] All development work and at least some testing.
"
774,"144.  ### Question144
"
775,"- [ ] Add the item to the current Sprint and drop an item of equal size.
"
776,"- [x] Inform the other members of the Scrum Team so the team can decide what to do.
"
777,"- [ ] Add the item to the next Sprint.
"
778,"- [ ] Add the item to the current Sprint without any adjustments.
"
779,"145.  ### Question145
"
780,"- [ ] Minimum of 7.
"
781,"- [ ] 9.
"
782,"- [x] Typically 10 or fewer people.
"
783,"- [ ] 7 plus or minus 2.
"
784,"146.  ### Question146
"
785,"- [ ] Keep Stakeholders from distracting the Developers.
"
786,"- [x] Optimizing the value of the work the Scrum Team does.
"
787,"- [ ] Managing the project and ensuring that the work meets the commitments to the Stakeholders.
"
788,"- [ ] Directing the Developers.
"
789,"147.  ### Question147
"
790,"- [ ] True.
"
791,"- [x] False.
"
792,"148.  ### Question148
"
793,"- [ ] Product Owner.
"
794,"- [ ] Project Manager.
"
795,"- [ ] Scrum Master.
"
796,"- [x] Development Team.
"
797,"149.  ### Question149
"
798,"- [x] The Product Owner.
"
799,"- [ ] The COO, CEO and CTO.
"
800,"- [ ] The Project Manager.
"
801,"- [ ] The Scrum Master.
"
802,"150.  ### Question150
"
803,"- [x] The Product Owner.
"
804,"- [ ] The Business Analyst.
"
805,"- [ ] Stakeholders.
"
806,"- [x] The Developers, with support from the Product Owner who is still accountable for it.
"
807,"151.  ### Question151
"
808,"- [ ] Super Creative Really Useful Method.
"
809,"- [ ] Self organising Collaborative & Reflective Universal Method.
"
810,"- [ ] Safe Controlled Response Under Management.
"
811,"- [x] Nothing. Its not an acronym.
"
812,"152.  ### Question152
"
813,"- [ ] The Scrum Master.
"
814,"- [ ] The Product Owner.
"
815,"- [x] The Developers.
"
816,"- [ ] The Scrum Team.
"
817,"153.  ### Question153
"
818,"- [ ] The team has a good mix of skills.
"
819,"- [ ] All members of the team have all the skills required to create the Product.
"
820,"- [x] The team has all competencies needed to accomplish the work.
"
821,"154.  ### Question154
"
822,"- [ ] Investigated and fixed immediately by the Developers.
"
823,"- [x] Reviewed with the Product Owner and added to the Product Backlog.
"
824,"155.  ### Question155
"
825,"- [x] Mid Sprint.
"
826,"- [x] Every Sprint.
"
827,"- [x] Multiple times per day.
"
828,"- [x] Every Day.
"
829,"156.  ### Question156
"
830,"- [ ] False.
"
831,"- [x] True.
"
832,"157.  ### Question157
"
833,"- [ ] The Developers.
"
834,"- [ ] The Product Owner.
"
835,"- [x] The Developers and the Product Owner.
"
836,"- [ ] Stakeholders.
"
837,"158.  ### Question158
"
838,"- [ ] True.
"
839,"- [x] False.
"
840,"159.  ### Question159
"
841,"- [x] Less back-tracking to discover where things went wrong, so you can spend more time building features.
"
842,"- [x] Allows teams to detect problems early.
"
843,"- [ ] Automatically eliminates all integration issues.
"
844,"- [x] Stop waiting to find out if your code’s going to work.
"
845,"160.  ### Question160
"
846,"- [x] It is done by the actual Developers who will carry out the work.
"
847,"- [x] It is done by a group, rather than an individual.
"
848,"- [x] Estimates are made relative to similar things.
"
849,"- [ ] It is done by the Lead Developer alone.
"
850,"161.  ### Question161
"
851,"- [ ] Sprint Planning - 8 hours or less, Daily Scrum - 30 minutes or less, Sprint Review - 4 hours or less, Sprint Retrospective - 3 hours or less.
"
852,"- [ ] Sprint Planning - 4 hours or less, Daily Scrum - 15 minutes or less, Sprint Review - 8 hours or less, Sprint Retrospective - 4 hours or less.
"
853,"- [ ] Sprint Planning - 4 hours or less, Daily Scrum - 15 minutes or less, Sprint Review - 4 hours or less, Sprint Retrospective - 4 hours or less.
"
854,"- [x] Sprint Planning - 8 hours or less, Daily Scrum - 15 minutes or less, Sprint Review - 4 hours or less, Sprint Retrospective - 3 hours or less.
"
855,"162.  ### Question162
"
856,"- [ ] False.
"
857,"- [x] True.
"
858,"163.  ### Question163
"
859,"- [ ] Appointing the QA Tester as the Lead Developer.
"
860,"- [x] The practice of writing Unit Tests prior to writing the implementation code.
"
861,"- [ ] Integrating Testers and Developers.
"
862,"- [ ] The process of motivating Testers.
"
863,"164.  ### Question164
"
864,"- [ ] True.
"
865,"- [x] False.
"
866,"165.  ### Question165
"
867,"- [ ] The Product Owner.
"
868,"- [x] The Developers.
"
869,"- [ ] Stakeholders.
"
870,"- [ ] The Scrum Master.
"
871,"166.  ### Question166
"
872,"- [x] Fixed immediately.
"
873,"- [ ] Ignored if not created by me.
"
874,"- [ ] Send to the Junior Developer to fix.
"
875,"- [ ] Added to the bug tracking repository and left for a later Sprint.
"
876,"167.  ### Question167
"
877,"- [x] False.
"
878,"- [ ] True.
"
879,"168.  ### Question168
"
880,"- [x] Focus
"
881,"- [x] Commitment
"
882,"- [x] Courage
"
883,"- [ ] Creativity
"
884,"- [ ] Accountability
"
885,"169.  ### Question169
"
886,"- [ ] Mainline
"
887,"- [x] Feature
"
888,"- [ ] Trunk
"
889,"- [ ] Master
"
890,"170.  ### Question170
"
891,"- [x] Analysis performed on code in a non-runtime environment
"
892,"- [ ] Analysis performed on Software at runtime
"
893,"- [ ] Duties of a Business Analyst
"
894,"- [ ] Checking static classes’ readability
"
895,"171.  ### Question171
"
896,"- [ ] Tester can see inside the component or system under test
"
897,"- [x] Tests that are done can be either functional or non-functional
"
898,"- [ ] The internal structure of the item being tested is known to the Tester
"
899,"- [x] Tester cannot see inside the component or system under test
"
900,"- [x] The internal structure of the item being tested is not known to the Tester
"
901,"172.  ### Question172
"
902,"- [ ] Keep it simple, silly
"
903,"- [x] Keep it safe and same
"
904,"- [ ] Keep it small and simple
"
905,"- [ ] Keep it simple stupid
"
906,"173.  ### Question173
"
907,"- [x] A prototype which will be thrown away
"
908,"- [ ] A comprehensive architecture implementation
"
909,"- [x] A quick and dirty implementation
"
910,"- [ ] A plan for all required architectures of the Product
"
911,"174.  ### Question174
"
912,"- [ ] Each Developer who has a special skill and works with all Scrum Teams of the organization is cross-functional
"
913,"- [ ] The Development Team should collaborate with all other functional departments of the organization
"
914,"- [x] The Development Team should have all required skills to create potentially releasable Increments without any dependency to others outside the team
"
915,"- [ ] Each Development Team member should have all required skills to create potentially releasable Increments without any dependency to others outside the team
"
916,"175.  ### Question175
"
917,"- [ ] They should ask the Product Owner to cancel the Sprint
"
918,"- [ ] They extend the Sprint duration
"
919,"- [ ] They can add new team members to the Team
"
920,"- [x] They negotiate with the Product Owner about the scope of the Sprint Backlog Items
"
921,"176.  ### Question176
"
922,"- [ ] Usually 2 hours
"
923,"- [ ] Usually 8 hours
"
924,"- [ ] Usually 6 hours
"
925,"- [x] Usually 4 hours
"
926,"177.  ### Question177
"
927,"- [ ] There is no assignment for both Sprint Backlog elements
"
928,"- [x] The Team can assign a task to a Team member with consensus
"
929,"- [ ] The Team should assign both Sprint Backlog elements
"
930,"- [ ] The Team assigns a Sprint Backlog Item to a Team member
"
931,"178.  ### Question178
"
932,"- [ ] False
"
933,"- [x] True
"
934,"179.  ### Question179
"
935,"- [x] The Development Team
"
936,"- [ ] The programmer
"
937,"- [ ] The QA specialist
"
938,"- [ ] The Tester
"
939,"180.  ### Question180
"
940,"- [ ] The Development Team and the Scrum Master
"
941,"- [ ] The Development Team and the Product Owner
"
942,"- [ ] The Scrum Team
"
943,"- [x] The Development Team
"
944,"184.  ### Question184
"
945,"- [ ] Sketch
"
946,"- [ ] Mockup
"
947,"- [ ] Wireframe
"
948,"- [x] Prototype
"
949,"185.  ### Question185
"
950,"- [x] Development Team
"
951,"- [ ] Tech Lead
"
952,"- [ ] Document Writer
"
953,"- [ ] Scrum Master
"
954,"186.  ### Question186
"
955,"- [x] False
"
956,"- [ ] True
"
957,"187.  ### Question187
"
958,"- [x] Minimizing or removing dependencies between teams
"
959,"- [x] Creating an integrated releasable Increment at the end of each Sprint
"
960,"- [ ] Having same Sprint duration for all teams
"
961,"- [ ] Increasing all team members utilization
"
962,"188.  ### Question188
"
963,"- [ ] Tech Lead
"
964,"- [x] Development Team
"
965,"- [ ] Chief Architect
"
966,"- [ ] CTO (Chief Technology Officer)
"
967,"- [ ] Scrum Master
"
968,"189.  ### Question189
"
969,"- [ ] No more than 10%
"
970,"- [ ] No more than 20%
"
971,"- [ ] It is not the Product Owner responsibility
"
972,"- [x] Any time that the Product Owner needs
"
973,"190.  ### Question190
"
974,"- [x] The Product Owner
"
975,"- [ ] The Project Manager
"
976,"- [x] The Scrum Master
"
977,"- [x] The Development Team
"
978,"191.  ### Question191
"
979,"- [x] Two combined Unit Tests
"
980,"- [ ] Test Spy
"
981,"- [ ] Test Stub
"
982,"- [ ] Mock Object
"
983,"192.  ### Question192
"
984,"- [x] Through it internal structure of code is altered
"
985,"- [x] Its results are improved maintainability, code readability and reduced complexity
"
986,"- [ ] There should be special and distinct Sprints called “Refactoring Sprint” to do refactoring with focus every a few Sprints
"
987,"- [ ] Through it external behavior of code is altered
"
988,"193.  ### Question193
"
989,"- [ ] Just at the Sprint Review
"
990,"- [ ] Whenever the Development Team is ready
"
991,"- [x] Anytime the Product Owner asks
"
992,"- [ ] When the Tech Lead allows the Development Team to show their work
"
993,"194.  ### Question194
"
994,"- [ ] Using chat tools to have the best communication
"
995,"- [x] Having a Definition of Done
"
996,"- [x] Having a common language
"
997,"- [ ] Having a comprehensive documentation
"
998,"195.  ### Question195
"
999,"- [x] Using Acceptance Tests to define requirements specified by the customer and market
"
1000,"- [ ] Using advanced Integration Test to develop quality Product
"
1001,"- [ ] Using approved tests by Product Owner in TDD
"
1002,"- [ ] Using Unit Tests to define requirements specified by the customer and market
"
1003,"196.  ### Question196
"
1004,"- [ ] LOC: Lines of Code
"
1005,"- [ ] CBO: Coupling Between Objects
"
1006,"- [ ] DIT: Depth of Inheritance Tree
"
1007,"- [x] SLOC: Sample Lines of Code
"
1008,"197.  ### Question197
"
1009,"- [ ] Comes from a comprehensive type of hardware testing in which a device passes the test if it does not catch fire during a sample long time run
"
1010,"- [ ] Comes from a basic type of hardware testing in which a device passes the test if it does not catch fire during a sample long time run
"
1011,"- [x] Comes from a basic type of hardware testing in which a device passes the test if it does not catch fire the first time it turns on
"
1012,"- [ ] Comes from a comprehensive type of hardware testing in which a device passes the test if it does not catch fire the first time it turns on
"
1013,"198.  ### Question198
"
1014,"- [ ] To publish the Product Increment on Production
"
1015,"- [ ] To penalize the Developer who breaks the build
"
1016,"- [x] To provide rapid feedback of build and test result
"
1017,"- [ ] To find who has made the change on source control
"
1018,"199.  ### Question199
"
1019,"- [ ] Adding detail to the items
"
1020,"- [x] Ordering
"
1021,"- [x] Design
"
1022,"- [ ] Develop
"
1023,"200.  ### Question200
"
1024,"- [ ] 7 ± 2
"
1025,"- [ ] 5 ± 4
"
1026,"- [x] 6 ± 3
"
1027,"- [ ] 9 ± 3
"
1028,"201.  ### Question201
"
1029,"- [ ] Removing impediments
"
1030,"- [x] Making technical decisions
"
1031,"- [x] Resolving team internal conflicts
"
1032,"- [ ] Assigning value to the Product Backlog Items
"
1033,"202.  ### Question202
"
1034,"- [ ] The scaled Scrum does not add or change anything in Scrum framework
"
1035,"- [x] It is based on the Scrum framework
"
1036,"- [x] It uses Scrum parts as its building blocks
"
1037,"- [ ] Through scaled Scrum Teams work on multiple Products
"
1038,"203.  ### Question203
"
1039,"- [x] Market change speed
"
1040,"- [x] Raising complexity speed
"
1041,"- [x] Amount of the risk
"
1042,"- [x] Cost of risk
"
1043,"241.  ### Question241
"
1044,"- [ ] False
"
1045,"- [x] True
"
1046,"204.  ### Question204
"
1047,"- [x] Nothing. There is no special time between two Sprints
"
1048,"- [ ] Resolving some important bugs
"
1049,"- [ ] Preparing Product Backlog Items for the next Sprint
"
1050,"- [ ] Thinking about architectural concerns of the next Sprint
"
1051,"205.  ### Question205
"
1052,"- [ ] Once a Release
"
1053,"- [ ] Each time that the Product Owner decides
"
1054,"- [ ] In the middle of each Sprint
"
1055,"- [x] Once a Sprint
"
1056,"206.  ### Question206
"
1057,"- [ ] False
"
1058,"- [x] True
"
1059,"207.  ### Question207
"
1060,"- [ ] A high count might indicate that a type or method is doing too much work
"
1061,"- [ ] A high count might be a warning that code will be hard to maintain
"
1062,"- [ ] It isn’t a Code Quality metric
"
1063,"- [x] It is explained via percentage
"
1064,"208.  ### Question208
"
1065,"- [x] The degree of a source code which is executed or exercised by a test suite
"
1066,"- [ ] The number of Unit Tests which have passed through a test suite run
"
1067,"- [ ] The amount of codes which is covered in a source control
"
1068,"- [ ] The number of Unit Tests which have failed through a test suite run
"
1069,"209.  ### Question209
"
1070,"- [x] Project Progress: the Product Owner, Sprint Progress: the Development Team
"
1071,"- [ ] Project Progress: the Scrum Master, Sprint Progress: the Development Team
"
1072,"- [ ] Project Progress: the Development Team, Sprint Progress: the Product Owner
"
1073,"- [ ] Project Progress: the Product Owner, Sprint Progress: the Scrum Master
"
1074,"210.  ### Question210
"
1075,"- [x] Debt caused to gain strategic benefits (such as time to market)
"
1076,"- [ ] This is typically caused by lack of awareness or knowledge
"
1077,"- [ ] Short-time gains, for instance cutting some corners to make an extra release for increased customer satisfaction
"
1078,"211.  ### Question211
"
1079,"- [x] Code Coverage
"
1080,"- [x] Lines of Code
"
1081,"- [ ] Automated build
"
1082,"- [ ] Test Doubles
"
1083,"- [x] Class Coupling
"
1084,"212.  ### Question212
"
1085,"- [ ] The Increment
"
1086,"- [ ] The Release Plan
"
1087,"- [x] The Sprint Backlog
"
1088,"- [x] The Sprint Goal
"
1089,"213.  ### Question213
"
1090,"- [ ] False
"
1091,"- [x] True
"
1092,"214.  ### Question214
"
1093,"- [ ] Extend the Sprint to finish them
"
1094,"- [ ] Move back to the bottom of the Product Backlog
"
1095,"- [x] Re-estimate and move back to the Product Backlog
"
1096,"- [ ] Directly move to the next Sprint
"
1097,"215.  ### Question215
"
1098,"- [ ] Inform the Scrum Master to work with his/her
"
1099,"- [ ] Reject it because they are independent
"
1100,"- [ ] Accept it because the CEO is the highest rank in the organization
"
1101,"- [x] Inform the Product Owner to work with his/her
"
1102,"216.  ### Question216
"
1103,"- [x] Whenever needed
"
1104,"- [ ] At the end of each release
"
1105,"- [ ] At the beginning of the project
"
1106,"- [ ] At the end of each Sprint
"
1107,"217.  ### Question217
"
1108,"- [ ] They can have a separate Definition of Done for each team as long as they do not violate each other
"
1109,"- [ ] Each team should have a separated Definition of Done
"
1110,"- [x] All teams should have one Definition of Done
"
1111,"- [x] All teams can have one common Definition of Done as long as they can create a unique integrated Increment
"
1112,"218.  ### Question218
"
1113,"- [ ] Domain Driven Design
"
1114,"- [x] Red-Green-Refactor
"
1115,"- [x] Test First Development (TFD)
"
1116,"- [ ] Continuous Deployment
"
1117,"219.  ### Question219
"
1118,"- [ ] At the end of each release
"
1119,"- [x] From the beginning of the project
"
1120,"- [ ] At the end each Sprint
"
1121,"- [ ] In special Sprints called “Test Sprint”
"
1122,"220.  ### Question220
"
1123,"- [ ] Ubiquitous language
"
1124,"- [ ] Tongue language
"
1125,"- [ ] Technical language
"
1126,"- [x] Native language
"
1127,"221.  ### Question221
"
1128,"- [ ] Impacted related requirement
"
1129,"- [x] Version and build of the Software under test
"
1130,"- [x] The severity of the defect
"
1131,"- [x] Expected results and observed results
"
1132,"222.  ### Question222
"
1133,"- [ ] The Scrum Master
"
1134,"- [ ] The Product Owner
"
1135,"- [ ] The Scrum Team
"
1136,"- [x] The Development Team
"
1137,"223.  ### Question223
"
1138,"- [x] When it is potentially releasable and shippable
"
1139,"- [ ] When the Product Owner approves it
"
1140,"- [ ] When the customer accepts it
"
1141,"- [ ] When the Scrum Master approves it
"
1142,"224.  ### Question224
"
1143,"- [x] False
"
1144,"- [ ] True
"
1145,"225.  ### Question225
"
1146,"- [x] To simulate the behavior of a given object
"
1147,"- [x] To isolate system under test for controlled testing
"
1148,"- [x] To cope with dependencies
"
1149,"- [ ] TDD can be done just by having mock objects
"
1150,"226.  ### Question226
"
1151,"- [ ] Product Backlog Items in the Product Backlog are usually smaller than the Sprint Backlog
"
1152,"- [ ] Product Backlog Items in the Product Backlog are usually larger than the Sprint Backlog
"
1153,"- [ ] Product Backlog Items usually have the same size in both the Product Backlog and the Sprint Backlog
"
1154,"- [x] Such a comparison does not make sense
"
1155,"227.  ### Question227
"
1156,"- [x] Classes with high efferent will affect other classes when changes are made
"
1157,"- [ ] A large efferent coupling can indicate that a class is unfocussed and may also indicate that it is unstable since it depends on the stability of all the types to which it is coupled
"
1158,"- [ ] Classes with high efferent coupling will receive the effects of changes or defects in other classes
"
1159,"- [ ] It is a Code Quality metric
"
1160,"228.  ### Question228
"
1161,"- [ ] Ca / (Ca+Ce)
"
1162,"- [x] Ce / (Ca+Ce)
"
1163,"- [ ] (Ca+Ce) / Ce
"
1164,"- [ ] (Ca+Ce) / Ca
"
1165,"229.  ### Question229
"
1166,"- [ ] It is a list of selected Product Backlog Items that the Development Team has committed for the Sprint
"
1167,"- [ ] It contains all Product Backlog Items and requirements that could be implemented for the project
"
1168,"- [ ] It is created one Sprint ahead the current Sprint
"
1169,"- [x] It is a plan for the Development Team to realize the Sprint Goal
"
1170,"230.  ### Question230
"
1171,"- [ ] Acceptance Criteria should be passed for a feature in order to be called as complete and done
"
1172,"- [x] Acceptance Criteria should be passed to ensure that a feature is working as expected
"
1173,"- [x] Definition of Done should be applied to a feature in order to be called as complete
"
1174,"- [x] There are many Acceptance Criteria in a Product
"
1175,"- [ ] There are many Definition of Done in a Product and a Scrum Team
"
1176,"231.  ### Question231
"
1177,"- [x] Liskov Substitution Principle
"
1178,"- [ ] Dual Interface Principle
"
1179,"- [x] Single Responsibility Principle
"
1180,"- [x] Open-Closed Principle
"
1181,"- [x] Interface Segregation Principle
"
1182,"232.  ### Question232
"
1183,"- [ ] False
"
1184,"- [x] True
"
1185,"233.  ### Question233
"
1186,"- [x] It is a feedback loop
"
1187,"- [ ] All Scrum Team members should participate in it
"
1188,"- [x] The Development Team monitors Sprint progress toward the Sprint Goal
"
1189,"- [x] It is a 15 minutes time-box event
"
1190,"234.  ### Question234
"
1191,"- [x] They live the Scrum Values deeply
"
1192,"- [x] They help their customers become more successful
"
1193,"- [x] They evolve the Definition of Done over time and add more stringent criteria to it continuously
"
1194,"- [x] There is a high level of creativity, productivity and accountability in the Team dynamics
"
1195,"- [ ] They respect top managers through accepting their work every time
"
1196,"235.  ### Question235
"
1197,"- [x] The Development Team
"
1198,"- [ ] The Scrum Master
"
1199,"- [ ] The Technical Manager
"
1200,"- [ ] The Product Owner
"
1201,"236.  ### Question236
"
1202,"- [ ] False
"
1203,"- [x] True
"
1204,"237.  ### Question237
"
1205,"- [ ] The Product Owner
"
1206,"- [ ] The Scrum Master
"
1207,"- [ ] The Project Manager
"
1208,"- [x] The Development Team
"
1209,"238.  ### Question238
"
1210,"- [ ] The top Management divides them
"
1211,"- [x] The Developers divide themselves
"
1212,"- [ ] The Product Owner divides them
"
1213,"- [ ] The Scrum Master divides them
"
1214,"239.  ### Question239
"
1215,"- [ ] Ask the Product Owner to make a Definition of Done
"
1216,"- [ ] Ask Project manager to help them
"
1217,"- [ ] Define a list of satisfactory tests for each PBI
"
1218,"- [x] The Development Team should define a Definition of Done
"
1219,"240.  ### Question240
"
1220,"- [x] False
"
1221,"- [ ] True
"
1222,"241.  ### Question241
"
1223,"- [x] Courage
"
1224,"- [x] Respect
"
1225,"- [x] Focus
"
1226,"- [ ] Transparency
"
1227,"- [ ] Adaptation
"
1228,"242.  ### Question242
"
1229,"- [x] Is a general, reusable solution to a commonly occurring problem within a given context in Software Design
"
1230,"- [ ] Is a low-fidelity UI pattern that can be called sketch
"
1231,"- [ ] Is a list of guidelines to design better UX for customers
"
1232,"- [ ] Is a high-fidelity UI pattern that can be called prototype
"
1233,"243.  ### Question243
"
1234,"- [ ] The Daily Scrum
"
1235,"- [ ] The Sprint Retrospective
"
1236,"- [x] No one
"
1237,"- [ ] The Sprint Review
"
1238,"244.  ### Question244
"
1239,"- [ ] The Business Analyst and the Product Owner
"
1240,"- [ ] The Development Team
"
1241,"- [x] The Development Team and the Product Owner
"
1242,"- [ ] The Product Owner solely
"
1243,"245.  ### Question245
"
1244,"- [x] Code in each test is as small as possible while maintaining readability of the code.
"
1245,"- [x] Each test is independent of other Unit Tests.
"
1246,"- [x] Each test makes assertions about only one logical concept.
"
1247,"- [x] The test executes fast.
"
1248,"- [ ] They exercise the persistence layer of a solution.
"
1249,"246.  ### Question246
"
1250,"- [ ] Always.
"
1251,"- [ ] If the Architect requires it.
"
1252,"- [x] If they are part of the Definition of Done.
"
1253,"- [ ] Never.
"
1254,"- [ ] They must be provided to the Development Team as part of the user specifications documents.
"
1255,"247.  ### Question247
"
1256,"- [ ] Cancel the Sprint.
"
1257,"- [ ] Complete the work that can be done on as much scope as possible and complete the rest during the ""hardening"" Sprints at the end of the release.
"
1258,"- [ ] Complete the work that can be done on as much scope as possible and use the Sprint Review to plan the rest with the Stakeholders.
"
1259,"- [x] Immediately raise the issue to the Scrum Master as an impediment.
"
1260,"- [ ] Stop using Scrum.
"
1261,"248.  ### Question248
"
1262,"- [x] Analysis
"
1263,"- [x] Decomposition
"
1264,"- [x] Design
"
1265,"- [ ] Programming
"
1266,"- [ ] Testing
"
1267,"249.  ### Question249
"
1268,"- [ ] True
"
1269,"- [x] False
"
1270,"250.  ### Question250
"
1271,"- [ ] True
"
1272,"- [x] False
"
1273,"251.  ### Question251
"
1274,"- [x] Automation improves the quality of Software by making builds less error-prone.
"
1275,"- [ ] Code reviews are much faster if you automate your build.
"
1276,"- [x] To get feedback on changes to the code early and often.
"
1277,"- [ ] You can't run automated tests without an automated build.
"
1278,"253.  ### Question253
"
1279,"- [x] Code Coverage does not ensure that the most important or highest risk areas of the code are being exercised by tests.
"
1280,"- [x] Code Coverage does not necessarily provide functional coverage.
"
1281,"- [ ] Code Coverage metrics vary by development platform (e.g., .NET, Java)
"
1282,"- [x] Could create incentives to write tests that simply increase Code Coverage, rather than tests that find bugs without increasing coverage.
"
1283,"- [ ] It is too complicated to explain to Management.
"
1284,"254.  ### Question254
"
1285,"- [x] Broken builds are detected quickly.
"
1286,"- [x] Know immediately how a check-in affected the build.
"
1287,"- [ ] Readability of code is improved.
"
1288,"- [x] The Software is generally kept in a buildable state.
"
1289,"255.  ### Question255
"
1290,"- [ ] A Development Team doesn't need an architecture model in Scrum and should focus on adding functionality. The architecture will come into place without fail as the Development Team adds functionality.
"
1291,"- [ ] The Development Team plans a Sprint 0 at the beginning of a project with the objective of developing an architecture model used during the following Sprints.
"
1292,"- [x] The Development Team plans some time each Sprint to discuss the architecture needed for the features planned in that Sprint.
"
1293,"- [ ] The Development Team should assign someone to the role of Software Architect whose job it is to make sure a consistent architecture is developed.
"
1294,"- [x] The Development Team should have a set of guiding architecture principles that every Development Team member understands and follows when writing code.
"
1295,"256.  ### Question256
"
1296,"- [ ] A bug that will be uncovered.
"
1297,"- [x] A technical requirement that must be satisfied.
"
1298,"- [ ] An assignment from the lead quality engineer
"
1299,"- [ ] Something that completes the test coverage of a system.
"
1300,"257.  ### Question257
"
1301,"- [x] Code being exercised by tests
"
1302,"- [ ] The absence of defects in code
"
1303,"- [ ] The quality of Unit Tests being written
"
1304,"- [ ] The ratio of number of tests to lines of code in the system being tested
"
1305,"- [ ] When a feature is done
"
1306,"258.  ### Question259
"
1307,"- [ ] A technique for ensuring that units of co-dependent or clustered computers perform correctly.
"
1308,"- [x] A test that isolates and verifies individual units of source code.
"
1309,"- [ ] A way for the team to ensure that the system satisfies the user requirements.
"
1310,"- [ ] A way in which units of programmers ensure their code works.
"
1311,"260.  ### Question260
"
1312,"- [ ] An insurance policy that covers the code for defects.
"
1313,"- [x] The degree to which the system under test has been exercised by tests.
"
1314,"- [ ] The number of Developers that understand how the code works.
"
1315,"- [ ] The percent of code in version control included in a build.
"
1316,"261.  ### Question261
"
1317,"- [ ] A predictable way to develop working, clean code.
"
1318,"- [ ] A Software Development technique based on automated tests.
"
1319,"- [ ] An incremental and emergent approach to Software Design.
"
1320,"- [x] Testing existing Software before developing any new Software.
"
1321,"262.  ### Question262
"
1322,"- [ ] A Developer and a Tester work together to write and test code.
"
1323,"- [ ] Managers doing performance reviews by comparing one programmer's code to another's.
"
1324,"- [ ] The Scrum Team is divided into several two-person Development Teams that consolidate work in a Scrum of Scrums.
"
1325,"- [x] Two Developers writing code together, providing constant peer review.
"
1326,"- [ ] Two programmers write code separately. A third programmer integrates the work.
"
1327,"263.  ### Question263
"
1328,"- [x] A term representing the eventual consequences of poor technical choices.
"
1329,"- [ ] Code that has not been commented or documented.
"
1330,"- [ ] The average time or money a Scrum Team spends per Sprint on bug fixes.
"
1331,"- [ ] The money an organization owes to tool and hardware vendors.
"
1332,"264.  ### Question264
"
1333,"- [ ] To have all code in a single file for easy printing and code reviews.
"
1334,"- [x] To improve readability and maintainability.
"
1335,"- [ ] To keep the code moving.
"
1336,"- [ ] To make the Software faster at runtime.
"
1337,"265.  ### Question265
"
1338,"- [ ] All technical practices must be used to support Scrum.
"
1339,"- [x] Scrum Development Teams with excellent technical practices will likely be more successful.
"
1340,"- [ ] Scrum requires specific technical practices or it isn't Scrum.
"
1341,"- [ ] None.
"
1342,"266.  ### Question266
"
1343,"- [ ] After Developer handoff.
"
1344,"- [ ] After Sprint Review.
"
1345,"- [x] From the beginning and throughout all Sprints.
"
1346,"- [ ] When the Product is feature complete.
"
1347,"267.  ### Question267
"
1348,"- [x] Anytime during the Sprint.
"
1349,"- [ ] As Part 1 of the Sprint Planning meeting.
"
1350,"- [ ] Never. It is the sole responsibility of the Product Owner to refine the Product Backlog.
"
1351,"- [ ] Only during Refinement meetings planned by the Product Owner.
"
1352,"268.  ### Question268
"
1353,"- [ ] In the beginning of the project, during Sprint 0.
"
1354,"- [ ] It is designed along with the vision, before the first Sprint.
"
1355,"- [x] Throughout the project, as understanding emerges and the Development Team learns more about the project.
"
1356,"- [ ] Whenever the assigned Architect can join the Development Team.
"
1357,"269.  ### Question269
"
1358,"- [x] Build/version where bug was found.
"
1359,"- [x] Clear title and proper grammar in report.
"
1360,"- [x] Expected results and observed results.
"
1361,"- [x] One bug per report.
"
1362,"- [x] Screenshots or other pictures of bug in action when user interfaces are involved.
"
1363,"- [x] Simple and repeatable reproduction steps.
"
1364,"270.  ### Question270
"
1365,"- [x] It causes you to construct a test harness that can be automated.
"
1366,"- [x] It improves quality and reduces bugs.
"
1367,"- [x] It promotes good design and separation of concerns.
"
1368,"- [x] It speeds the overall development process.
"
1369,"271.  ### Question271
"
1370,"- [x] Acceptance Test Driven Development
"
1371,"- [ ] Object Driven Requirements Definition.
"
1372,"- [ ] Quality Oriented Requirements Definition.
"
1373,"- [ ] Regression Testing
"
1374,"272.  ### Question272
"
1375,"- [ ] To communicate the name of the Developer that worked on the code.
"
1376,"- [ ] To ensure that ""orphan functions"" are not created.
"
1377,"- [ ] To make it easy to distinguish between different Software Products.
"
1378,"- [x] To make the code more readable.
"
1379,"272.  ### Question272
"
1380,"- [x] Causes team members to consider each other's work and context.
"
1381,"- [ ] It eliminates bugs completely.
"
1382,"- [x] It leads to higher transparency and rapid feedback to the team.
"
1383,"- [ ] The build is executed once every night and at least once each weekend.
"
1384,"273.  ### Question273
"
1385,"- [ ] Class coupling
"
1386,"- [x] Code Coverage
"
1387,"- [x] Cycle time per feature
"
1388,"- [ ] Cyclomatic Complexity
"
1389,"- [ ] Depth of inheritance
"
1390,"274.  ### Question274
"
1391,"- [ ] A Software Development practice that continuously integrates feedback from users into Software Design.
"
1392,"- [ ] A Software Development practice used by Integration Teams to create Best Practice branching and merging strategies.
"
1393,"- [ ] A Software Development practice where members of a development team all work on the same computer to ensure a common code base.
"
1394,"- [x] A Software Development practice where members of a development team integrate and verify their work frequently, often multiple times each day, to detect integration errors as quickly as possible.
"
1395,"275.  ### Question275
"
1396,"- [ ] A decision made by a systems Architect to settle disagreement within a Development Team
"
1397,"- [ ] A fundamental architectural problem found in an existing application
"
1398,"- [x] A small development activity to learn about technical elements of a proposed solution
"
1399,"- [ ] The result of an exhaustive architectural planning effort
"
1400,"276.  ### Question276
"
1401,"- [ ] As often as possible, and certainly prior to the end of the Sprint.
"
1402,"- [ ] Once per day.
"
1403,"- [x] Whenever new or changed code is checked into version control.
"
1404,"- [ ] Whenever the Quality Assurance group becomes uncertain that the system works.
"
1405,"277.  ### Question277
"
1406,"- [x] Designing tests before satisfying them.
"
1407,"- [ ] Having the Tester in the Development Team write the test plans before coding.
"
1408,"- [ ] Testing existing code before adding more code to it.
"
1409,"- [ ] The continuous restructuring of Software to retain flexibility.
"
1410,"278.  ### Question278
"
1411,"- [x] They allow frequent validation of the unit of Software being worked on, ensuring it remains in a potentially shippable state.
"
1412,"- [x] The build process is clearly defined and scripted, making it easy consistent and repeatable.
"
1413,"- [ ] They eliminate the need for Build Engineers.
"
1414,"- [x] They ensure your Product remains bug free.
"
1415,"- [ ] They support continuous integration.
"
1416,"279.  ### Question279
"
1417,"- [ ] Fix the bug.
"
1418,"- [x] Fix the bug if it is critical or easily fixed. Otherwise, put the new bug into the Product Backlog to be prioritized and fixed in an upcoming Sprint.
"
1419,"- [ ] Revise the tests so that the bug no longer appears on the bug report.
"
1420,"- [ ] Stub out the code that caused the bug so it no longer occurs.
"
1421,"280.  ### Question280
"
1422,"- [ ] The Architect chosen by the Development Team.
"
1423,"- [ ] The Corporate Architect.
"
1424,"- [x] The Development Team.
"
1425,"- [ ] The Software Architect.
"
1426,"281.  ### Question281
"
1427,"- [ ] Anyone who wants to attend
"
1428,"- [ ] No one is required, anyone who wishes to attend is welcome
"
1429,"- [x] The Development Team
"
1430,"- [ ] The entire Scrum Team
"
1431,"- [ ] The Scrum Master and the Development Team
"
1432,"282.  ### Question282
"
1433,"- [ ] Only the most senior people from the Development Team.
"
1434,"- [x] The Development Team.
"
1435,"- [ ] The external Business Analysts that have prepared the functional details.
"
1436,"- [ ] The integration architects from the release department.
"
1437,"- [x] The Product Owner.
"
1438,"- [ ] The Stakeholders.
"
1439,"283.  ### Question283
"
1440,"- [ ] Acceptance Tests.
"
1441,"- [ ] Detailed designs.
"
1442,"- [x] The full history of retrospective plans and lessons learned.
"
1443,"- [ ] Well-structured and named code.
"
